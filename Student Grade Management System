#include <iostream>
#include <vector>

using namespace std;

// Class representing a student
class Student {
public:
    string name;
    int rollNumber;
    vector<int> grades;

    // Calculate and display the average grade
    void displayAverageGrade() {
        if (grades.empty()) {
            cout << "No grades available for " << name << "." << endl;
        } else {
            int total = 0;
            for (int grade : grades) {
                total += grade;
            }
            double average = static_cast<double>(total) / grades.size();
            cout << "Average grade for " << name << ": " << average << endl;
        }
    }
};

int main() {
    vector<Student> students;

    cout << "Student Grade Management System" << endl;

    while (true) {
        cout << "\n1. Add Student\n2. Display Average Grade\n3. Exit\n";
        int choice;
        cout << "Enter your choice: ";
        while (!(cin >> choice) || (choice < 1 || choice > 3)) {
            cout << "Invalid input. Please enter a number between 1 and 3: ";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }

        switch (choice) {
            case 1: {
                // Add Student
                Student student;
                cout << "Enter student name: ";
                cin >> student.name;
                cout << "Enter roll number: ";
                while (!(cin >> student.rollNumber) || student.rollNumber <= 0) {
                    cout << "Invalid input. Please enter a valid roll number: ";
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                }

                // Input grades
                int numGrades;
                cout << "Enter the number of grades: ";
                while (!(cin >> numGrades) || numGrades <= 0) {
                    cout << "Invalid input. Please enter a valid number of grades: ";
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                }

                cout << "Enter grades: ";
                for (int i = 0; i < numGrades; ++i) {
                    int grade;
                    while (!(cin >> grade) || grade < 0 || grade > 100) {
                        cout << "Invalid input. Please enter a valid grade (0-100): ";
                        cin.clear();
                        cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    }
                    student.grades.push_back(grade);
                }

                // Add the student to the vector
                students.push_back(student);
                cout << "Student added successfully." << endl;
                break;
            }
            case 2: {
                // Display Average Grade
                if (students.empty()) {
                    cout << "No students available." << endl;
                } else {
                    cout << "Enter the roll number of the student: ";
                    int rollNumber;
                    while (!(cin >> rollNumber) || rollNumber <= 0) {
                        cout << "Invalid input. Please enter a valid roll number: ";
                        cin.clear();
                        cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    }

                    // Find the student with the given roll number
                    auto it = find_if(students.begin(), students.end(), [rollNumber](const Student& s) {
                        return s.rollNumber == rollNumber;
                    });

                    if (it != students.end()) {
                        it->displayAverageGrade();
                    } else {
                        cout << "Student not found with roll number " << rollNumber << "." << endl;
                    }
                }
                break;
            }
            case 3:
                // Exit
                cout << "Exiting the program. Goodbye!" << endl;
                return 0;
        }
    }

    return 0; // Exit successfully
}
